/*%FSM<COMPILE "C:\Programme\Bohemia Interactive\Tools\FSM Editor Personal Edition\scriptedFSM.cfg, RUBE_AI_INF_medicalSupport">*/
/*%FSM<HEAD>*/
/*
item0[] = {"init",0,4346,-223.880951,-84.329956,-133.880920,-34.329956,0.000000,"init"};
item1[] = {"_",4,218,-98.554657,-71.521652,-66.567429,-45.903809,0.000000,""};
item2[] = {"update_status",2,250,-34.743942,47.649796,55.256073,97.649796,0.000000,"update status"};
item3[] = {"all_busy",4,218,-139.388596,149.830399,-49.388611,199.830399,0.000000,"all busy"};
item4[] = {"medics_are_dead",4,218,90.897209,47.649818,180.897202,97.649818,2.000000,"medics" \n "are dead"};
item5[] = {"quit",1,250,221.666473,47.649818,311.666504,97.649803,0.000000,"quit"};
item6[] = {"delay_loop",2,250,-256.509460,149.729004,-166.509476,199.728958,0.000000,"delay loop"};
item7[] = {"delay",4,218,-255.999237,47.225235,-166.100052,98.864746,0.000000,"delay"};
item8[] = {"medics_available",4,218,-34.177269,150.506805,55.822739,200.506805,1.000000,"medics" \n "available"};
item9[] = {"scan_area__med_",2,250,-54.153690,234.574829,76.631775,316.204376,0.000000,"scan area," \n "med. support," \n "busy action"};
item10[] = {"delay",4,218,-255.583954,250.389557,-165.583969,300.389557,0.000000,"delay"};
item11[] = {"settle_down",2,250,-35.967979,-83.679230,54.032043,-33.679245,0.000000,"settle down"};
item12[] = {"_",4,218,-5.044677,-11.802343,25.025656,14.059330,0.000000,""};
link0[] = {0,1};
link1[] = {1,11};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,8};
link5[] = {3,6};
link6[] = {4,5};
link7[] = {6,7};
link8[] = {7,2};
link9[] = {8,9};
link10[] = {9,10};
link11[] = {10,6};
link12[] = {11,12};
link13[] = {12,2};
globals[] = {0.000000,0,0,0,0,640,480,1,15,6316128,1,-356.110168,418.769989,436.018677,-206.966995,799,663,1};
window[] = {0,-1,-1,-1,-1,806,1474,3071,12,1,816};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "RUBE_AI_INF_medicalSupport";
  class States
  {
    /*%FSM<STATE "init">*/
    class init
    {
      name = "init";
      init = /*%FSM<STATEINIT""">*/"/*" \n
       "	Description:" \n
       "	 stationary group of medics takes care of injured friendlys" \n
       "*/" \n
       "" \n
       "private [" \n
       "	""_group"", ""_guards"", " \n
       "	""_position"", ""_radius"", " \n
       "	""_buildings"", ""_vehicles""" \n
       "];" \n
       "" \n
       "_group = grpNull;" \n
       "_guards = []; // not medics/kind of a unit blacklist" \n
       "" \n
       "_position = []; " \n
       "_radius = 32; // radius to look for injured ones" \n
       "" \n
       "_buildings = []; // usually medical tents" \n
       "_vehicles = []; // ambulances..." \n
       "" \n
       "" \n
       "" \n
       "/*" \n
       "	read parameters" \n
       "*/" \n
       "{" \n
       "	switch (_x select 0) do" \n
       "	{" \n
       "		case ""group"": { _group = _x select 1; };" \n
       "		case ""guards"": { _guards = _x select 1; };" \n
       "		case ""position"": { _position = _x select 1; };" \n
       "		case ""radius"": { _radius = _x select 1; };" \n
       "		case ""buildings"": { _buildings = _x select 1; };" \n
       "		case ""vehicles"": { _vehicles = _x select 1; };" \n
       "	};" \n
       "} forEach _this;" \n
       "" \n
       "" \n
       "" \n
       "" \n
       "/*" \n
       "	init" \n
       "*/" \n
       "private [" \n
       "	""_t"", ""_delay"", ""_i""," \n
       "	""_side""," \n
       "	""_medics"", ""_availableMedics""," \n
       "	""_injuredFriendlies"", ""_friendly""," \n
       "	""_buildingPositions""," \n
       "	""_busyPositions"", ""_busyPositionsCopy""," \n
       "	""_weaponContainer"", ""_weaponDropPosition""" \n
       "];" \n
       "" \n
       "_position set [2, 0];" \n
       "" \n
       "_t = time;" \n
       "_delay = 5 + (random 4);" \n
       "" \n
       "_side = side _group;" \n
       "" \n
       "_medics = (units _group) - _guards;" \n
       "_availableMedics = [];" \n
       "_injuredFriendlies = [];" \n
       "" \n
       "_buildingPositions = [];" \n
       "{" \n
       "	_buildingPositions = [" \n
       "		_buildingPositions," \n
       "		(_x call RUBE_getBuildingPositions)" \n
       "	] call RUBE_arrayAppend;" \n
       "} forEach _buildings;" \n
       "" \n
       "_busyPositionsCopy = []; // working copy" \n
       "_busyPositions = +_buildingPositions;" \n
       "{" \n
       "	_busyPositions set [(count _busyPositions), (position _x)];" \n
       "} forEach _vehicles;" \n
       "// random busy positions otherwise..." \n
       "if ((count _busyPositions) < 3) then" \n
       "{" \n
       "	for ""_i"" from 0 to (5 + (ceil (random 4))) do" \n
       "	{" \n
       "		_busyPositions set [" \n
       "			(count _busyPositions), " \n
       "			([_position, [0,0], [_radius, _radius]] call RUBE_randomizePos)" \n
       "		];" \n
       "	};" \n
       "};" \n
       "" \n
       "_weaponContainer = objNull;" \n
       "_weaponDropPosition = +_position;" \n
       "" \n
       "switch (true) do" \n
       "{" \n
       "	/*" \n
       "	case ((count _vehicles) > 0): " \n
       "	{" \n
       "		_weaponContainer = _vehicles call RUBE_randomSelect; " \n
       "		_weaponDropPosition = position _weaponContainer;" \n
       "	};" \n
       "	*/" \n
       "	case ((count _buildingPositions) > 0): " \n
       "	{" \n
       "		_weaponDropPosition = _buildingPositions call RUBE_randomSelect;" \n
       "	};" \n
       "};" \n
       "" \n
       "" \n
       "" \n
       "" \n
       "/*" \n
       "	private functions" \n
       "*/" \n
       "" \n
       "private [" \n
       "	""_getBusyPosition""," \n
       "	""_updateMedics""," \n
       "	""_doSomething""" \n
       "];" \n
       "" \n
       "" \n
       "_getBusyPosition = {" \n
       "	if ((count _busyPositionsCopy) == 0) then" \n
       "	{" \n
       "		_busyPositionsCopy = +_busyPositions;" \n
       "	};" \n
       "" \n
       "	(_busyPositionsCopy call RUBE_randomPop)" \n
       "};" \n
       "" \n
       "" \n
       "" \n
       "// update medic status (alive?, busy?)" \n
       "_updateMedics = {" \n
       "	_availableMedics = [];" \n
       "" \n
       "	// remove dead medics" \n
       "	_medics = [" \n
       "		_medics," \n
       "		{" \n
       "			if (!(alive _this)) exitWith { false };" \n
       "			true" \n
       "		}" \n
       "	] call RUBE_arrayFilter;" \n
       "" \n
       "	// check if they're available" \n
       "	{" \n
       "		if (!([_x, ""RUBE_isBusy""] call RUBE_isTrue)) then" \n
       "		{" \n
       "			_availableMedics set [(count _availableMedics), _x];" \n
       "		};" \n
       "	} forEach _medics;" \n
       "};" \n
       "" \n
       "" \n
       "" \n
       "// do something ... (healing or busy stuff, plus guards action)" \n
       "_doSomething = {" \n
       "   // medics action" \n
       "	{" \n
       "		if ((count _injuredFriendlies) > 0) then" \n
       "		{" \n
       "			// help friendly unit" \n
       "			_friendly = _injuredFriendlies call RUBE_randomPop;" \n
       "			_friendly forceSpeed 0;" \n
       "			_friendly disableAI ""MOVE"";" \n
       "" \n
       "			if (_friendly call RUBE_isMale) then" \n
       "			{" \n
       "				_friendly playAction ""agonyStart"";" \n
       "			} else" \n
       "			{" \n
       "				_friendly setUnitPos ([""Middle"", ""DOWN""] call RUBE_randomSelect);" \n
       "			};" \n
       "" \n
       "			_x setVariable [""RUBE_isBusy"", true];" \n
       "			_x setVariable [""RUBE_target"", _friendly];" \n
       "			_friendly setVariable [""RUBE_isBusy"", true];" \n
       "			_x doWatch _friendly;" \n
       "			[" \n
       "				_x," \n
       "				(position _friendly)," \n
       "				{" \n
       "					private [""_friendly"", ""_p""];" \n
       "					_friendly = _this getVariable ""RUBE_target"";" \n
       "					_friendly doWatch _this;" \n
       "" \n
       "					if ((_friendly call RUBE_isMale) && ((damage _friendly) > 0)) then" \n
       "					{" \n
       "                 				 // help male" \n
       "						_this setUnitPos ""Middle"";" \n
       "						sleep (0.5 + (random 2));" \n
       "" \n
       "						_p = _frienldy modelToWorld [([0.84, -0.84] call RUBE_randomSelect), (0.15 + (random 0.2)), 0];" \n
       "						_p set [2, 0];" \n
       "						_this playAction ""medicStart"";" \n
       "						_this setPos _p;" \n
       "						sleep 0.05;" \n
       "						_this setDir ([_this, _friendly] call BIS_fnc_dirTo);" \n
       "						_this setPos _p;" \n
       "" \n
       "						while {((damage _friendly) > 0.2)} do" \n
       "						{" \n
       "							_friendly setDamage ((damage _friendly) - 0.05);" \n
       "							sleep (1 + (random 3));" \n
       "							if (!(alive _this)) exitWith {};" \n
       "							if (!(alive _friendly)) exitWith {};" \n
       "						};" \n
       "						_friendly setDamage 0;" \n
       "" \n
       "						_this playAction ""medicStop"";" \n
       "						sleep (1 + (random 3));" \n
       "						_friendly playAction ""agonyStop"";" \n
       "						_friendly setDamage 0;" \n
       "					} else" \n
       "					{" \n
       "                  			// help female (or only slightly damaged males)" \n
       "						_this setDir ((direction _friendly) - 180);" \n
       "						_friendly action [""heal"", _this];" \n
       "						sleep (12 + (random 20));" \n
       "						_friendly setUnitPos ""AUTO"";" \n
       "					};" \n
       "					_friendly forceSpeed -1;" \n
       "					_friendly enableAI ""MOVE"";" \n
       "					_friendly doWatch objNull;" \n
       "" \n
       "					_friendly setVariable [""RUBE_isBusy"", false];" \n
       "" \n
       "					_this doWatch objNull;" \n
       "					_this setUnitPos ""AUTO"";" \n
       "					_this setVariable [""RUBE_isBusy"", false];" \n
       "					_this setVariable [""RUBE_target"", nil];" \n
       "				}" \n
       "			] execFSM ""modules\common\RUBE\ai\doMoveStop.fsm"";" \n
       "		} else" \n
       "		{" \n
       "			// busy action..." \n
       "			[" \n
       "				_x," \n
       "				([] call _getBusyPosition)," \n
       "				{" \n
       "               if (!([_this, ""RUBE_isBusy""] call RUBE_isTrue)) then" \n
       "               {" \n
       "				_this setVariable [""RUBE_isBusy"", true];" \n
       "               		_this setUnitPos ""Middle"";" \n
       "				sleep (3 + (random 7));" \n
       "				_this setVariable [""RUBE_isBusy"", false];" \n
       "				_this setUnitPos ""AUTO"";" \n
       "               };" \n
       "				}" \n
       "			]" \n
       "		};" \n
       "	} forEach _availableMedics;" \n
       "" \n
       "   // guards action" \n
       "	{" \n
       "		if (!([_x, ""RUBE_isBusy""] call RUBE_isTrue) && ((random 1.0) > 0.37)) then" \n
       "		{" \n
       "			_x setVariable [""RUBE_isBusy"", true];" \n
       "			_x forceSpeed 2.0;" \n
       "			[" \n
       "				_x," \n
       "				([_position, [0,0], [_radius, _radius]] call RUBE_randomizePos)," \n
       "				{" \n
       "					_this setUnitPos ([""Middle"", ""AUTO""] call RUBE_randomSelect);" \n
       "					sleep (4 + (random 12));" \n
       "					_this setUnitPos ""AUTO"";" \n
       "					_this forceSpeed -1;" \n
       "					_this setVariable [""RUBE_isBusy"", false];" \n
       "				}" \n
       "			] execFSM ""modules\common\RUBE\ai\doMoveStop.fsm"";" \n
       "		};" \n
       "	} forEach _guards;" \n
       "};" \n
       ""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "_">*/
        class _
        {
          priority = 0.000000;
          to="settle_down";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "update_status">*/
    class update_status
    {
      name = "update_status";
      init = /*%FSM<STATEINIT""">*/"[] call _updateMedics;" \n
       "" \n
       "/*" \n
       "diag_log format[""MEDICS: %1"", _medics];" \n
       "diag_log format["" - available: %1"", _availableMedics];" \n
       "*/"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "medics_are_dead">*/
        class medics_are_dead
        {
          priority = 2.000000;
          to="quit";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(count _medics) == 0"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "medics_available">*/
        class medics_available
        {
          priority = 1.000000;
          to="scan_area__med_";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(count _availableMedics) > 0"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "all_busy">*/
        class all_busy
        {
          priority = 0.000000;
          to="delay_loop";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "quit">*/
    class quit
    {
      name = "quit";
      init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "delay_loop">*/
    class delay_loop
    {
      name = "delay_loop";
      init = /*%FSM<STATEINIT""">*/"_t = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "delay">*/
        class delay
        {
          priority = 0.000000;
          to="update_status";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(time - _t) > _delay"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "scan_area__med_">*/
    class scan_area__med_
    {
      name = "scan_area__med_";
      init = /*%FSM<STATEINIT""">*/"// check for people in need of help..." \n
       "_injuredFriendlies = [" \n
       "	(nearestObjects [_position, [""man""], _radius])," \n
       "	{" \n
       "		if (!(alive _this)) exitWith { false };" \n
       "		if ((damage _this) < 0.1) exitWith { false };" \n
       "		if ((_side getFriend (side _this)) < 0.6) exitWith { false };" \n
       "		if ([_x, ""RUBE_isBusy""] call RUBE_isTrue) exitWith { false };" \n
       "" \n
       "		true" \n
       "	}" \n
       "] call RUBE_arrayFilter;" \n
       "" \n
       "// let's do something about it then..." \n
       "[] call _doSomething;" \n
       "" \n
       "_t = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "delay">*/
        class delay
        {
          priority = 0.000000;
          to="delay_loop";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(time - _t) > _delay"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "settle_down">*/
    class settle_down
    {
      name = "settle_down";
      init = /*%FSM<STATEINIT""">*/"[" \n
       "	[""group"", _group]," \n
       "	[""type"", ""MOVE""]," \n
       "	[""position"", _position]," \n
       "	[""behaviour"", ""AWARE""]," \n
       "	[""combatMode"", ""GREEN""]," \n
       "	[""speed"", ""LIMITED""]" \n
       "] call RUBE_updateWaypoint;" \n
       "" \n
       "// init medics" \n
       "{" \n
       "	_x forceSpeed 2.0;" \n
       "" \n
       "	// drop weapons" \n
       "	_x setVariable [""RUBE_isBusy"", true];" \n
       "	_x setVariable [""RUBE_nextTo"", ([] call _getBusyPosition)];" \n
       "	_x setVariable [""RUBE_dropObj"", _weaponContainer];" \n
       "	[" \n
       "		_x," \n
       "		_weaponDropPosition," \n
       "		{" \n
       "			private [""_drop""];" \n
       "			_drop = _this getVariable ""RUBE_dropObj"";" \n
       "" \n
       "			if (isNull _drop) then" \n
       "			{" \n
       "				_drop = _this;" \n
       "			};" \n
       "" \n
       "			_this setUnitPos ""Middle"";" \n
       "			_this forceSpeed 2.0;" \n
       "			{" \n
       "				_this action [""dropWeapon"", _drop, _x];" \n
       "				sleep (random 2.0);" \n
       "			} forEach (weapons _this);" \n
       "" \n
       "			_this setUnitPos ""AUTO"";" \n
       "			_this forceSpeed 2.0;" \n
       "			_this doMove (_this getVariable ""RUBE_nextTo"");" \n
       "" \n
       "			_this setVariable [""RUBE_dropObj"", nil];" \n
       "			_this setVariable [""RUBE_nextTo"", nil];" \n
       "			_this setVariable [""RUBE_isBusy"", false];" \n
       "		}" \n
       "	] execFSM ""modules\common\RUBE\ai\doMoveStop.fsm"";" \n
       "" \n
       "} forEach ((units _group) - _guards);"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "_">*/
        class _
        {
          priority = 0.000000;
          to="update_status";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
  };
  initState="init";
  finalStates[] =
  {
    "quit",
  };
};
/*%FSM</COMPILE>*/