/*%FSM<COMPILE "C:\Programme\Bohemia Interactive\Tools\FSM Editor Personal Edition\scriptedFSM.cfg, RUBE_AI_INF_fleeTo">*/
/*%FSM<HEAD>*/
/*
item0[] = {"init",0,250,-39.148243,-123.846100,50.851753,-73.846107,0.000000,"init"};
item1[] = {"_",4,218,-10.433853,-48.470825,22.382648,-21.514923,0.000000,""};
item2[] = {"move",2,250,-38.598862,0.177826,51.401154,50.177826,0.000000,"move"};
item3[] = {"dead",4,218,80.889038,0.177826,170.889038,50.177826,2.000000,"dead"};
item4[] = {"ready",4,218,-88.954491,69.310120,1.045502,119.310120,1.000000,"ready"};
item5[] = {"evaluate_positio",2,250,-38.598862,147.830750,51.401154,197.830750,0.000000,"evaluate" \n "position"};
item6[] = {"dead",1,250,201.230438,0.177826,291.230469,50.177811,0.000000,"dead"};
item7[] = {"is_cover",4,218,-39.452347,222.937439,50.547646,272.937439,1.000000,"is cover"};
item8[] = {"in_the_open",4,218,-150.405426,146.977264,-60.405418,196.977264,0.000000,"in the open"};
item9[] = {"",7,210,-109.438141,21.514954,-101.438133,29.514954,0.000000,""};
item10[] = {"done",4,218,76.621620,147.830750,166.621613,197.830750,2.000000,"done"};
item11[] = {"arrived",1,250,202.532135,147.881409,292.532166,197.881393,0.000000,"arrived"};
item12[] = {"reaction",2,250,-40.305832,299.751099,49.694183,349.751099,0.000000,"reaction"};
item13[] = {"no_contacts",4,218,-151.258881,300.604584,-61.258896,350.604584,0.000000,"no contacts"};
item14[] = {"contacts",4,218,-40.317902,376.552734,49.682098,426.552734,1.000000,"contacts"};
item15[] = {"engage",2,250,-40.305832,463.620483,49.694183,513.620483,0.000000,"engage"};
item16[] = {"timeout",4,218,-234.046936,462.766998,-144.046951,512.766968,0.000000,"timeout"};
item17[] = {"",7,210,-193.079651,321.941925,-185.079651,329.941925,0.000000,""};
item18[] = {"",7,210,-193.900421,22.031546,-185.900421,30.031548,0.000000,""};
item19[] = {"moveTo_failed",4,218,24.559029,70.163605,114.559021,120.163597,0.000000,"moveTo" \n "failed"};
link0[] = {0,1};
link1[] = {1,2};
link2[] = {2,3};
link3[] = {2,4};
link4[] = {2,19};
link5[] = {3,6};
link6[] = {4,5};
link7[] = {5,7};
link8[] = {5,8};
link9[] = {5,10};
link10[] = {7,12};
link11[] = {8,9};
link12[] = {9,2};
link13[] = {10,11};
link14[] = {12,13};
link15[] = {12,14};
link16[] = {13,17};
link17[] = {14,15};
link18[] = {15,16};
link19[] = {16,17};
link20[] = {17,18};
link21[] = {18,9};
link22[] = {19,5};
globals[] = {0.000000,0,0,0,0,640,480,1,22,6316128,1,-256.316772,393.698181,448.822723,-153.587250,751,696,1};
window[] = {0,-1,-1,-1,-1,1047,1660,3082,220,1,768};
*//*%FSM</HEAD>*/
class FSM
{
  fsmName = "RUBE_AI_INF_fleeTo";
  class States
  {
    /*%FSM<STATE "init">*/
    class init
    {
      name = "init";
      init = /*%FSM<STATEINIT""">*/"/*" \n
       "	Description:" \n
       "	 do flee/retreat to destination, hopping from cover to cover if possible," \n
       "	 occasionally returning fire to the given targets..." \n
       "" \n
       "	- should be executed with doFSM" \n
       "	- targets need to be set as variable ""RUBE_targets"" in the units scope" \n
       "	  or simply pass one single target regularly..." \n
       "*/" \n
       "" \n
       "private [" \n
       "	""_executedFSM""," \n
       "	""_unit"", ""_units"", ""_target"", ""_targets"", ""_destination""," \n
       "	""_moveLength"", ""_deviance""" \n
       "];" \n
       "" \n
       "// whether execFSM'd or do-/commandFSM'd" \n
       "_executedFSM = false;" \n
       "" \n
       "_unit = objNull;" \n
       "_targets = [];" \n
       "_moveLength = 50;" \n
       "_deviance = 20;" \n
       "" \n
       "/*" \n
       "	read parameters depending on how the fsm was called/executed" \n
       "*/" \n
       "if (!(isnil (""_units""))) then" \n
       "{" \n
       "	if ((count _units) > 0) then" \n
       "	{" \n
       "		_unit = _units select 0;" \n
       "	};" \n
       "};" \n
       "// _target" \n
       "// _destination" \n
       "// _leader" \n
       "" \n
       "// check if called with execFSM" \n
       "if (!(isnil (""_this""))) then" \n
       "{" \n
       "	{" \n
       "		switch (_x select 0) do" \n
       "		{" \n
       "			case ""unit"": { _unit = _x select 1; };" \n
       "			case ""target"": { _targets = [(_x select 1)]; };" \n
       "			case ""targets"": { _targets = _x select 1; };" \n
       "			case ""moveLength"": { _moveLength = _x select 1; };" \n
       "			case ""destination"": { _destination = _x select 1; };" \n
       "		};" \n
       "	} forEach _this;" \n
       "" \n
       "	_units = [_unit];" \n
       "	_executedFSM = true;" \n
       "} else" \n
       "{" \n
       "	// doFSM/commandFSM, try to retrieve more information" \n
       "	// from the units scope" \n
       "	_targets = [_unit, ""RUBE_targets"", [_target]] call RUBE_initVariable;" \n
       "	_moveLength = [_unit, ""RUBE_moveLength"", _moveLength] call RUBE_initVariable;" \n
       "};" \n
       "" \n
       "" \n
       "/*" \n
       "	init and private functions" \n
       "*/" \n
       "private [" \n
       "	""_currentMoveTo"", ""_isCover"", ""_isLastMove""," \n
       "	""_orgDistCoef""," \n
       "	""_coverTimeout"", ""_coverTimeoutTime""," \n
       "	""_engageTimeout"", ""_engageTimeoutTime""," \n
       "	""_getNextPosition""" \n
       "];" \n
       "" \n
       "_currentMoveTo = [];" \n
       "_isCover = false;" \n
       "_isLastMove = false;" \n
       "" \n
       "_orgDistCoef = 1 / (_unit distance _destination);;" \n
       "" \n
       "_coverTimeout = time;" \n
       "_coverTimeoutTime = 1.0;" \n
       "" \n
       "_engageTimeout = time;" \n
       "_engageTimeoutTime = 5.0;" \n
       "" \n
       "" \n
       "// returns the next position to flee/run to,  trying to run" \n
       "// from cover to cover..." \n
       "_getNextPosition = {" \n
       "	private [""_d"", ""_r"", ""_dir"", ""_pos"", ""_objects"", ""_obj"", ""_dist"", ""_box"", ""_offset""];" \n
       "" \n
       "	// deviance proportional/shrinking to destination distance" \n
       "	_d = _deviance * (_unit distance _destination) * _orgDistCoef;" \n
       "	_r = _moveLength * (0.75 + (random 0.5));" \n
       "	_dir = [_unit, _destination] call BIS_fnc_dirTo;" \n
       "" \n
       "	_pos = [" \n
       "		_unit, " \n
       "		_r," \n
       "		(_dir + (_d * 0.5) - (random _d))" \n
       "	] call BIS_fnc_relPos;" \n
       "	_pos set [2, 0];" \n
       "" \n
       "	_objects = nearestObjects [_pos, [], (_r * 0.6)];" \n
       "	_obj = objNull;" \n
       "	_dist = 0;" \n
       "" \n
       "	// randomly pick one until we have one that is big enough" \n
       "	while {((count _objects) > 0)} do" \n
       "	{" \n
       "		_obj = _objects call RUBE_randomPop;" \n
       "		" \n
       "		if (!(_obj isKindOf ""Man"")) then" \n
       "		{" \n
       "			_box = _obj call RUBE_boundingBoxSize;" \n
       "			if ((((_box select 0) min (_box select 1)) > 2.0) && ((_box select 2) > 1.5)) then" \n
       "			{" \n
       "				_offset = boundingCenter _obj;" \n
       "				_dist = ((_box select 0) + (abs (_offset select 0))) max ((_box select 1) + (abs (_offset select 1)));" \n
       "				_dist = _dist * 0.51;" \n
       "			};" \n
       "		};" \n
       "" \n
       "		if (_dist > 0) exitWith {};" \n
       "	};" \n
       "" \n
       "	// calculate cover position if we have a good object" \n
       "	if (_dist > 0) then" \n
       "	{" \n
       "		if ((count _targets) > 0) then" \n
       "		{" \n
       "			_dir = [(_targets call RUBE_randomSelect), _unit] call BIS_fnc_dirTo;" \n
       "		};" \n
       "		_isCover = true;" \n
       "		_pos = [(position _obj), _dist, _dir] call BIS_fnc_relPos;" \n
       "		_pos set [2, 0];" \n
       "" \n
       "		//-- DEBUG COVER POSITIONS //" \n
       "		/*" \n
       "			_r = ""Sign_arrow_down_large_EP1"" createVehicle _pos;" \n
       "			_r setPos _pos;" \n
       "		*/" \n
       "		//--" \n
       "" \n
       "	} else" \n
       "	{" \n
       "		// position in the open otherwise..." \n
       "		_isCover = false;" \n
       "	};" \n
       "" \n
       "	// last move?" \n
       "	if ((_pos distance _destination) < (_moveLength * 1.05)) then" \n
       "	{" \n
       "		_isLastMove = true;" \n
       "		_pos = _destination;" \n
       "	};" \n
       "" \n
       "	_pos" \n
       "};" \n
       "" \n
       "" \n
       "" \n
       "" \n
       "" \n
       ""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "_">*/
        class _
        {
          priority = 0.000000;
          to="move";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "move">*/
    class move
    {
      name = "move";
      init = /*%FSM<STATEINIT""">*/"// no target" \n
       "_unit doWatch objNull;" \n
       "" \n
       "// where to next?" \n
       "_currentMoveTo = [] call _getNextPosition;" \n
       "" \n
       "if (_executedFSM) then" \n
       "{" \n
       "	_unit doMove _currentMoveTo;" \n
       "} else" \n
       "{" \n
       "	_unit moveTo _currentMoveTo;" \n
       "};" \n
       "" \n
       "_unit setUnitPos ""UP"";" \n
       "" \n
       "_unit disableAI ""TARGET"";" \n
       "_unit disableAI ""AUTOTARGET"";" \n
       ""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "dead">*/
        class dead
        {
          priority = 2.000000;
          to="dead";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"!(alive _unit)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "ready">*/
        class ready
        {
          priority = 1.000000;
          to="evaluate_positio";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(moveToCompleted _unit) || (unitReady _unit)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "moveTo_failed">*/
        class moveTo_failed
        {
          priority = 0.000000;
          to="evaluate_positio";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(moveToFailed _unit)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/"_isCover = false;"/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "evaluate_positio">*/
    class evaluate_positio
    {
      name = "evaluate_positio";
      init = /*%FSM<STATEINIT""">*/"_unit setUnitPos ""Middle"";" \n
       "" \n
       "_unit enableAI ""TARGET"";" \n
       "_unit enableAI ""AUTOTARGET"";"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "done">*/
        class done
        {
          priority = 2.000000;
          to="arrived";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_isLastMove"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "is_cover">*/
        class is_cover
        {
          priority = 1.000000;
          to="reaction";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"_isCover"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "in_the_open">*/
        class in_the_open
        {
          priority = 0.000000;
          to="move";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/""/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "dead">*/
    class dead
    {
      name = "dead";
      init = /*%FSM<STATEINIT""">*/""/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "arrived">*/
    class arrived
    {
      name = "arrived";
      init = /*%FSM<STATEINIT""">*/"_unit setUnitPos ""AUTO"";"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "reaction">*/
    class reaction
    {
      name = "reaction";
      init = /*%FSM<STATEINIT""">*/"// clear target list (TODO: sort somehow?)" \n
       "_targets = [" \n
       "	_targets," \n
       "	{" \n
       "		(alive _this)" \n
       "	}" \n
       "] call RUBE_arrayFilter;" \n
       "" \n
       "_coverTimeout = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "contacts">*/
        class contacts
        {
          priority = 1.000000;
          to="engage";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(count _targets) > 0"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
        /*%FSM<LINK "no_contacts">*/
        class no_contacts
        {
          priority = 0.000000;
          to="move";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"(time - _coverTimeout) > _coverTimeoutTime"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
    /*%FSM<STATE "engage">*/
    class engage
    {
      name = "engage";
      init = /*%FSM<STATEINIT""">*/"_unit setUnitPos ([""Middle"", ""DOWN""] call RUBE_randomSelect);" \n
       "" \n
       "_target = _targets call RUBE_randomSelect;" \n
       "" \n
       "_unit doTarget _target;" \n
       "_unit doFire _target;" \n
       "" \n
       "_engageTimeout = time;"/*%FSM</STATEINIT""">*/;
      precondition = /*%FSM<STATEPRECONDITION""">*/""/*%FSM</STATEPRECONDITION""">*/;
      class Links
      {
        /*%FSM<LINK "timeout">*/
        class timeout
        {
          priority = 0.000000;
          to="move";
          precondition = /*%FSM<CONDPRECONDITION""">*/""/*%FSM</CONDPRECONDITION""">*/;
          condition=/*%FSM<CONDITION""">*/"((time - _engageTimeout) > _engageTimeoutTime) || !(alive _target)"/*%FSM</CONDITION""">*/;
          action=/*%FSM<ACTION""">*/""/*%FSM</ACTION""">*/;
        };
        /*%FSM</LINK>*/
      };
    };
    /*%FSM</STATE>*/
  };
  initState="init";
  finalStates[] =
  {
    "dead",
    "arrived",
  };
};
/*%FSM</COMPILE>*/